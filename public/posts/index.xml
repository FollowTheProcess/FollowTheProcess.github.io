<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on @FollowTheProcess</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on @FollowTheProcess</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 27 Mar 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What exactly is &#39;Modern Python&#39;?</title>
      <link>http://localhost:1313/posts/modern_python/</link>
      <pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/modern_python/</guid>
      <description>&lt;p&gt;Python is going through a huge modernisation kick in recent years with things like &lt;a href=&#34;https://www.python.org/dev/peps/pep-0484/&#34;&gt;PEP 484 Type Hints&lt;/a&gt;, &lt;a href=&#34;https://github.com/markshannon/faster-cpython/blob/master/plan.md&#34;&gt;performance improvements&lt;/a&gt; coming in 3.11 and now being able to run on &lt;a href=&#34;https://twitter.com/ethanhs/status/1464308141105967104&#34;&gt;web assembly&lt;/a&gt;, moving away from the hangover of python 2 and fully embracing the new style of &amp;ldquo;modern&amp;rdquo; python 3.&lt;/p&gt;&#xA;&lt;p&gt;The python sphere is full of posts, packages and repos claiming to use or take advantage of &amp;ldquo;modern python&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;So you may be asking&amp;hellip; what exactly do people mean when they say &amp;ldquo;modern python&amp;rdquo;? What follows is a list of what I consider to the most essential components of &amp;ldquo;modern python&amp;rdquo; and by the end hopefully you&amp;rsquo;ll want to make sure you&amp;rsquo;re doing &amp;ldquo;modern python&amp;rdquo; too!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Self Documenting Makefile</title>
      <link>http://localhost:1313/posts/makefile/</link>
      <pubDate>Tue, 26 Oct 2021 22:05:11 +0100</pubDate>
      <guid>http://localhost:1313/posts/makefile/</guid>
      <description>&lt;p&gt;If you aren&amp;rsquo;t familiar with &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;make&lt;/a&gt;, it&amp;rsquo;s a command runner and build system capable of quite complicated stuff. It&amp;rsquo;s syntax can get complicated for non-trivial workflows and it has lots of weird quirks (like &lt;code&gt;.PHONY&lt;/code&gt;).&lt;/p&gt;&#xA;&lt;p&gt;However, it&amp;rsquo;s ubiquitous on nearly all systems and pretty easy to get going with so it&amp;rsquo;s very widely used in all sorts of projects in just about every language.&lt;/p&gt;&#xA;&lt;p&gt;In fact, a filename global search on GitHub yields an astonishing 112 million results!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Shut Down a Go HTTP Server Gracefully</title>
      <link>http://localhost:1313/posts/graceful_shutdown/</link>
      <pubDate>Mon, 25 Oct 2021 19:04:46 +0100</pubDate>
      <guid>http://localhost:1313/posts/graceful_shutdown/</guid>
      <description>&lt;p&gt;When developing HTTP services in Go, you will start and stop your server hundreds of times, think of the whole &lt;code&gt;go run main.go&lt;/code&gt; &lt;code&gt;ctrl + c&lt;/code&gt; loop!&lt;/p&gt;&#xA;&lt;p&gt;When you hit &lt;code&gt;ctrl + c&lt;/code&gt;, (on UNIX systems) your program is passed the &lt;code&gt;SIGINT&lt;/code&gt; Unix signal. The go runtime handles this and will stop your program relatively safely, but it&amp;rsquo;s not &lt;strong&gt;great&lt;/strong&gt; practice!&lt;/p&gt;&#xA;&lt;p&gt;What if you have database connection pools open or forgot to close a file etc.?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Just &gt; Make</title>
      <link>http://localhost:1313/posts/just/</link>
      <pubDate>Sun, 24 Oct 2021 10:22:23 +0100</pubDate>
      <guid>http://localhost:1313/posts/just/</guid>
      <description>&lt;p&gt;Makefiles (&lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;GNU Make&lt;/a&gt;) are ubiquitous in software development and they are a fantastically useful tool! But for all but the simplest tasks, the syntax can get very unreadable and messy.&lt;/p&gt;&#xA;&lt;p&gt;Some programs like complex C or C++ projects will use Makefiles as the full build system it was designed to be, however most people tend to use Makefiles as simple task runners.&lt;/p&gt;&#xA;&lt;p&gt;Consider the following example for a simple Go project:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using FieldsFunc in Go</title>
      <link>http://localhost:1313/posts/fieldsfunc/</link>
      <pubDate>Fri, 22 Oct 2021 20:34:50 +0100</pubDate>
      <guid>http://localhost:1313/posts/fieldsfunc/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been playing with Go a lot recently, and one thing it lends itself &lt;strong&gt;really&lt;/strong&gt; well to is CLIs (Command Line Interfaces):&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Runs very fast, feels snappy to use&lt;/li&gt;&#xA;&lt;li&gt;Standalone, statically linked binary - easy to distribute&lt;/li&gt;&#xA;&lt;li&gt;Easy cross-compilation for multiple platforms, OS&amp;rsquo;s and processor architectures&lt;/li&gt;&#xA;&lt;li&gt;Excellent libraries for creating CLIs e.g. &lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;cobra&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The excellent &lt;a href=&#34;https://github.com/cli/cli&#34;&gt;GitHub CLI&lt;/a&gt; is written in Go üëèüèª&lt;/p&gt;&#xA;&lt;p&gt;So needless to say, I&amp;rsquo;ve been writing more than a few CLIs: &lt;a href=&#34;https://github.com/FollowTheProcess/gotoil&#34;&gt;gotoil&lt;/a&gt;, &lt;a href=&#34;https://github.com/FollowTheProcess/tag&#34;&gt;tag&lt;/a&gt;, &lt;a href=&#34;https://github.com/FollowTheProcess/goignore&#34;&gt;goignore&lt;/a&gt; etc&amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Automate your Virtual Environments... and everything else.</title>
      <link>http://localhost:1313/posts/auto_venv/</link>
      <pubDate>Mon, 01 Mar 2021 17:27:07 +0000</pubDate>
      <guid>http://localhost:1313/posts/auto_venv/</guid>
      <description>&lt;p&gt;We all know virtual environments are important! But they are a bit of a pain if you do them a lot&amp;hellip;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Make it&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python -m venv .venv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Activate it&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source .venv/bin/activate&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Install/upgrade seeds&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python -m pip install --upgrade pip setuptools wheel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b949e;font-style:italic&#34;&gt;# Install what you actually wanted&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python -m pip install things i actually wanted&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python -m pip install this needs to be automated&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;automation&#34;&gt;Automation&lt;/h2&gt;&#xA;&lt;p&gt;I &lt;strong&gt;LOVE&lt;/strong&gt; automating things and given that the commands we see above have to be typed &lt;em&gt;every time&lt;/em&gt; you start a new project, this should scream automation to you!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prevent Global Pip Installs</title>
      <link>http://localhost:1313/posts/require_venv/</link>
      <pubDate>Tue, 23 Feb 2021 14:21:11 +0000</pubDate>
      <guid>http://localhost:1313/posts/require_venv/</guid>
      <description>&lt;p&gt;This is going to be a short one, about something I discovered in the &lt;a href=&#34;https://pip.pypa.io/en/stable/&#34;&gt;pip&lt;/a&gt; documentation the other day and never knew about and I wish I did before I broke my python installation a dozen times when I was first starting out!&lt;/p&gt;&#xA;&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;&#xA;&lt;p&gt;We all know the dangers of breaking your system python installation with package conflicts.&lt;/p&gt;&#xA;&lt;p&gt;Virtual environments are probably the most common way of avoiding nasty package conflicts. A virtual environment is effectively (but not exactly) a self contained version of python you can install packages into without touching your system python.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pyenv is Awesome!</title>
      <link>http://localhost:1313/posts/pyenv/</link>
      <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/pyenv/</guid>
      <description>&lt;p&gt;I think everyone who has touched python at some point has seen this picture&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/posts/python_environment.png&#34; alt=&#34;environment hell&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s mainly poking fun at the kinds of ways you can get your installation all screwed up if you&amp;rsquo;re not careful but is often misinterpreted as throwing shade on how python works.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://snarky.ca/deconstructing-xkcd-com-1987/&#34;&gt;Brett Cannon&amp;rsquo;s Blog Post&lt;/a&gt; has an excellent deconstruction of what this xkcd means and how to avoid it.&lt;/p&gt;&#xA;&lt;p&gt;There&amp;rsquo;s lots you can do to avoid this happening to you. My favourite method is &lt;a href=&#34;https://github.com/pyenv/pyenv&#34;&gt;pyenv&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Buggy Accelerate Backend</title>
      <link>http://localhost:1313/posts/buggy_accelerate/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/buggy_accelerate/</guid>
      <description>&lt;p&gt;If you work on macOS and use &lt;a href=&#34;https://numpy.org&#34;&gt;numpy&lt;/a&gt;, chances are at some point you may have had some very confusing error message appear about &amp;ldquo;buggy accelerate backend&amp;hellip; something something&amp;hellip; polyfit sanity check.&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;If you&amp;rsquo;ve not had the joy of running into this particular error: &lt;a href=&#34;https://github.com/numpy/numpy/issues/15947&#34;&gt;https://github.com/numpy/numpy/issues/15947&lt;/a&gt; I don&amp;rsquo;t envy you.&lt;/p&gt;&#xA;&lt;p&gt;There&amp;rsquo;s quite a lot of information on the GitHub issue thread about it and on stack overflow etc and honestly you should look at that for a better explanation, those people know far more than me! There&amp;rsquo;s lots of informed discussion on exactly &lt;em&gt;why&lt;/em&gt; this error is raised which I&amp;rsquo;m not going to go into here.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
