<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on @FollowTheProcess</title>
    <link>https://followtheprocess.github.io/tags/python/</link>
    <description>Recent content in python on @FollowTheProcess</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 17 Feb 2022 17:31:45 +0000</lastBuildDate><atom:link href="https://followtheprocess.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What exactly is &#39;Modern Python&#39;?</title>
      <link>https://followtheprocess.github.io/posts/modern_python/</link>
      <pubDate>Thu, 17 Feb 2022 17:31:45 +0000</pubDate>
      
      <guid>https://followtheprocess.github.io/posts/modern_python/</guid>
      <description></description>
    </item>
    
    <item>
      <title>pytoil</title>
      <link>https://followtheprocess.github.io/projects/pytoil/</link>
      <pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://followtheprocess.github.io/projects/pytoil/</guid>
      <description>pytoil is a small, helpful CLI to help developers manage their local and remote projects with ease!
  Source Code: https://github.com/FollowTheProcess/pytoil
  Documentation: https://FollowTheProcess.github.io/pytoil/
  What is it? pytoil is a handy tool that helps you stay on top of all your projects, remote or local. It&amp;rsquo;s primarily aimed at python developers but you could easily use it to manage any project!
pytoil is:
 Easy to use ✅ Easy to configure ✅ Safe (it won&amp;rsquo;t edit your repos at all) ✅ Useful!</description>
    </item>
    
    <item>
      <title>Automate your Virtual Environments... and everything else.</title>
      <link>https://followtheprocess.github.io/posts/auto_venv/</link>
      <pubDate>Mon, 01 Mar 2021 17:27:07 +0000</pubDate>
      
      <guid>https://followtheprocess.github.io/posts/auto_venv/</guid>
      <description>We all know virtual environments are important! But they are a bit of a pain if you do them a lot&amp;hellip;
# Make it python -m venv .venv # Activate it source .venv/bin/activate # Install/upgrade seeds python -m pip install --upgrade pip setuptools wheel # Install what you actually wanted python -m pip install things i actually wanted python -m pip install this needs to be automated Automation I LOVE automating things and given that the commands we see above have to be typed every time you start a new project, this should scream automation to you!</description>
    </item>
    
    <item>
      <title>Prevent Global Pip Installs</title>
      <link>https://followtheprocess.github.io/posts/require_venv/</link>
      <pubDate>Tue, 23 Feb 2021 14:21:11 +0000</pubDate>
      
      <guid>https://followtheprocess.github.io/posts/require_venv/</guid>
      <description>This is going to be a short one, about something I discovered in the pip documentation the other day and never knew about and I wish I did before I broke my python installation a dozen times when I was first starting out!
Problem We all know the dangers of breaking your system python installation with package conflicts.
Virtual environments are probably the most common way of avoiding nasty package conflicts.</description>
    </item>
    
    <item>
      <title>Pyenv is Awesome!</title>
      <link>https://followtheprocess.github.io/posts/pyenv/</link>
      <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://followtheprocess.github.io/posts/pyenv/</guid>
      <description>I think everyone who has touched python at some point has seen this picture&amp;hellip;
It&amp;rsquo;s mainly poking fun at the kinds of ways you can get your installation all screwed up if you&amp;rsquo;re not careful but is often misinterpreted as throwing shade on how python works.
Brett Cannon&amp;rsquo;s Blog Post has an excellent deconstruction of what this xkcd means and how to avoid it.
There&amp;rsquo;s lots you can do to avoid this happening to you.</description>
    </item>
    
    <item>
      <title>pymechtest</title>
      <link>https://followtheprocess.github.io/projects/pymechtest/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://followtheprocess.github.io/projects/pymechtest/</guid>
      <description>pymechtest is a small, hopefully helpful python package to help engineers collate, process, analyse, and report on mechanical test data. I built pymechtest to help automate the things I did on a near-daily basis as a materials engineer. I hope it can prove some use to you too!
  Source Code: https://github.com/FollowTheProcess/pymechtest
  Documentation: https://FollowTheProcess.github.io/pymechtest/
  Overview Have you ever had to process a bunch of csv output from a mechanical test machine, copying and pasting data into a hacky Excel template to calculate things like elastic modulus and yield strength?</description>
    </item>
    
    <item>
      <title>Buggy Accelerate Backend</title>
      <link>https://followtheprocess.github.io/posts/buggy_accelerate/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://followtheprocess.github.io/posts/buggy_accelerate/</guid>
      <description>If you work on macOS and use numpy, chances are at some point you may have had some very confusing error message appear about &amp;ldquo;buggy accelerate backend&amp;hellip; something something&amp;hellip; polyfit sanity check.&amp;rdquo;
If you&amp;rsquo;ve not had the joy of running into this particular error: https://github.com/numpy/numpy/issues/15947 I don&amp;rsquo;t envy you.
There&amp;rsquo;s quite a lot of information on the GitHub issue thread about it and on stack overflow etc and honestly you should look at that for a better explanation, those people know far more than me!</description>
    </item>
    
    <item>
      <title>Fatigue Damage Prediction</title>
      <link>https://followtheprocess.github.io/projects/fatigue/</link>
      <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://followtheprocess.github.io/projects/fatigue/</guid>
      <description>Using machine learning to predict fatigue crack growth under complex thermomechanical loads. Achieved a damage severity predicive accuracy of ±0.25mm and a positional predictive accuracy of ±7.0mm.
Tom Fleet, Sep 2020
Background Repeated cyclic loading of a material will eventually lead to a phenomenon called &amp;ldquo;fatigue crack growth&amp;rdquo;. I&amp;rsquo;m not going to explain the details here but I&amp;rsquo;d point you to this for more info. Essentially, a crack will start to form and repeated cyclic loading will progressively grow this crack until it is large enough such that the remaining material can no longer handle the stress and the component will break.</description>
    </item>
    
  </channel>
</rss>
