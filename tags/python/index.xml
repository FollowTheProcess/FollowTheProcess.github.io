<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on @FollowTheProcess</title><link>https://followtheprocess.github.io/tags/python/</link><description>Recent content in Python on @FollowTheProcess</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 27 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://followtheprocess.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>What exactly is 'Modern Python'?</title><link>https://followtheprocess.github.io/posts/modern_python/</link><pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate><guid>https://followtheprocess.github.io/posts/modern_python/</guid><description>&lt;p>Python is going through a huge modernisation kick in recent years with things like &lt;a href="https://www.python.org/dev/peps/pep-0484/">PEP 484 Type Hints&lt;/a>, &lt;a href="https://github.com/markshannon/faster-cpython/blob/master/plan.md">performance improvements&lt;/a> coming in 3.11 and now being able to run on &lt;a href="https://twitter.com/ethanhs/status/1464308141105967104">web assembly&lt;/a>, moving away from the hangover of python 2 and fully embracing the new style of &amp;ldquo;modern&amp;rdquo; python 3.&lt;/p>
&lt;p>The python sphere is full of posts, packages and repos claiming to use or take advantage of &amp;ldquo;modern python&amp;rdquo;&lt;/p>
&lt;p>So you may be asking&amp;hellip; what exactly do people mean when they say &amp;ldquo;modern python&amp;rdquo;? What follows is a list of what I consider to the most essential components of &amp;ldquo;modern python&amp;rdquo; and by the end hopefully you&amp;rsquo;ll want to make sure you&amp;rsquo;re doing &amp;ldquo;modern python&amp;rdquo; too!&lt;/p></description></item><item><title>pytoil</title><link>https://followtheprocess.github.io/projects/pytoil/</link><pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate><guid>https://followtheprocess.github.io/projects/pytoil/</guid><description>&lt;p>&lt;img src="https://followtheprocess.github.io/images/projects/pytoil/logo.png" alt="logo">&lt;/p>
&lt;p>&lt;em>pytoil is a small, helpful CLI to help developers manage their local and remote projects with ease!&lt;/em>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Source Code&lt;/strong>: &lt;a href="https://github.com/FollowTheProcess/pytoil">https://github.com/FollowTheProcess/pytoil&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Documentation&lt;/strong>: &lt;a href="https://FollowTheProcess.github.io/pytoil/">https://FollowTheProcess.github.io/pytoil/&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-it">What is it?&lt;/h2>
&lt;p>&lt;code>pytoil&lt;/code> is a handy tool that helps you stay on top of all your projects, remote or local. It&amp;rsquo;s primarily aimed at python developers but you could easily use it to manage any project!&lt;/p>
&lt;p>pytoil is:&lt;/p>
&lt;ul>
&lt;li>Easy to use &amp;#x2705;&lt;/li>
&lt;li>Easy to configure &amp;#x2705;&lt;/li>
&lt;li>Safe (it won&amp;rsquo;t edit your repos at all) &amp;#x2705;&lt;/li>
&lt;li>Useful! (I hope &amp;#x1f603;)&lt;/li>
&lt;/ul>
&lt;p>Say goodbye to janky bash scripts &amp;#x1f44b;&lt;/p></description></item><item><title>Automate your Virtual Environments... and everything else.</title><link>https://followtheprocess.github.io/posts/auto_venv/</link><pubDate>Mon, 01 Mar 2021 17:27:07 +0000</pubDate><guid>https://followtheprocess.github.io/posts/auto_venv/</guid><description>&lt;p>We all know virtual environments are important! But they are a bit of a pain if you do them a lot&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b949e;font-style:italic"># Make it&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python -m venv .venv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b949e;font-style:italic"># Activate it&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>source .venv/bin/activate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b949e;font-style:italic"># Install/upgrade seeds&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python -m pip install --upgrade pip setuptools wheel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b949e;font-style:italic"># Install what you actually wanted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python -m pip install things i actually wanted
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python -m pip install this needs to be automated
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="automation">Automation&lt;/h2>
&lt;p>I &lt;strong>LOVE&lt;/strong> automating things and given that the commands we see above have to be typed &lt;em>every time&lt;/em> you start a new project, this should scream automation to you!&lt;/p></description></item><item><title>Prevent Global Pip Installs</title><link>https://followtheprocess.github.io/posts/require_venv/</link><pubDate>Tue, 23 Feb 2021 14:21:11 +0000</pubDate><guid>https://followtheprocess.github.io/posts/require_venv/</guid><description>&lt;p>This is going to be a short one, about something I discovered in the &lt;a href="https://pip.pypa.io/en/stable/">pip&lt;/a> documentation the other day and never knew about and I wish I did before I broke my python installation a dozen times when I was first starting out!&lt;/p>
&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>We all know the dangers of breaking your system python installation with package conflicts.&lt;/p>
&lt;p>Virtual environments are probably the most common way of avoiding nasty package conflicts. A virtual environment is effectively (but not exactly) a self contained version of python you can install packages into without touching your system python.&lt;/p></description></item><item><title>Pyenv is Awesome!</title><link>https://followtheprocess.github.io/posts/pyenv/</link><pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate><guid>https://followtheprocess.github.io/posts/pyenv/</guid><description>&lt;p>I think everyone who has touched python at some point has seen this picture&amp;hellip;&lt;/p>
&lt;p>&lt;img src="https://followtheprocess.github.io/images/posts/python_environment.png" alt="environment hell">&lt;/p>
&lt;p>It&amp;rsquo;s mainly poking fun at the kinds of ways you can get your installation all screwed up if you&amp;rsquo;re not careful but is often misinterpreted as throwing shade on how python works.&lt;/p>
&lt;p>&lt;a href="https://snarky.ca/deconstructing-xkcd-com-1987/">Brett Cannon&amp;rsquo;s Blog Post&lt;/a> has an excellent deconstruction of what this xkcd means and how to avoid it.&lt;/p>
&lt;p>There&amp;rsquo;s lots you can do to avoid this happening to you. My favourite method is &lt;a href="https://github.com/pyenv/pyenv">pyenv&lt;/a>.&lt;/p></description></item><item><title>pymechtest</title><link>https://followtheprocess.github.io/projects/pymechtest/</link><pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate><guid>https://followtheprocess.github.io/projects/pymechtest/</guid><description>&lt;p>&lt;img src="https://followtheprocess.github.io/images/projects/pymechtest/logo.png" alt="logo">&lt;/p>
&lt;p>&lt;em>pymechtest is a small, hopefully helpful python package to help engineers collate, process, analyse, and report on mechanical test data. I built pymechtest to help automate the things I did on a near-daily basis as a materials engineer. I hope it can prove some use to you too!&lt;/em>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Source Code&lt;/strong>: &lt;a href="https://github.com/FollowTheProcess/pymechtest">https://github.com/FollowTheProcess/pymechtest&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Documentation&lt;/strong>: &lt;a href="https://FollowTheProcess.github.io/pymechtest/">https://FollowTheProcess.github.io/pymechtest/&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>Have you ever had to process a bunch of csv output from a mechanical test machine, copying and pasting data into a hacky Excel template to calculate things like elastic modulus and yield strength?&lt;/p></description></item><item><title>Buggy Accelerate Backend</title><link>https://followtheprocess.github.io/posts/buggy_accelerate/</link><pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate><guid>https://followtheprocess.github.io/posts/buggy_accelerate/</guid><description>&lt;p>If you work on macOS and use &lt;a href="https://numpy.org">numpy&lt;/a>, chances are at some point you may have had some very confusing error message appear about &amp;ldquo;buggy accelerate backend&amp;hellip; something something&amp;hellip; polyfit sanity check.&amp;rdquo;&lt;/p>
&lt;p>If you&amp;rsquo;ve not had the joy of running into this particular error: &lt;a href="https://github.com/numpy/numpy/issues/15947">https://github.com/numpy/numpy/issues/15947&lt;/a> I don&amp;rsquo;t envy you.&lt;/p>
&lt;p>There&amp;rsquo;s quite a lot of information on the GitHub issue thread about it and on stack overflow etc and honestly you should look at that for a better explanation, those people know far more than me! There&amp;rsquo;s lots of informed discussion on exactly &lt;em>why&lt;/em> this error is raised which I&amp;rsquo;m not going to go into here.&lt;/p></description></item><item><title>Fatigue Damage Prediction</title><link>https://followtheprocess.github.io/projects/fatigue/</link><pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate><guid>https://followtheprocess.github.io/projects/fatigue/</guid><description>&lt;p>&lt;em>Using machine learning to predict fatigue crack growth under complex thermomechanical loads. Achieved a damage severity predicive accuracy of ±0.25mm and a positional predictive accuracy of ±7.0mm.&lt;/em>&lt;/p>
&lt;p>Tom Fleet, Sep 2020&lt;/p>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>Repeated cyclic loading of a material will eventually lead to a phenomenon called &amp;ldquo;fatigue crack growth&amp;rdquo;. I&amp;rsquo;m not going to explain the details here but I&amp;rsquo;d point you to &lt;a href="https://en.wikipedia.org/wiki/Fatigue_(material)">this&lt;/a> for more info. Essentially, a crack will start to form and repeated cyclic loading will progressively grow this crack until it is large enough such that the remaining material can no longer handle the stress and the component will break.&lt;/p></description></item></channel></rss>