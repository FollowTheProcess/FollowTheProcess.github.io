<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>automation on @FollowTheProcess</title><link>https://followtheproecess.github.io/tags/automation/</link><description>Recent content in automation on @FollowTheProcess</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 23 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://followtheproecess.github.io/tags/automation/index.xml" rel="self" type="application/rss+xml"/><item><title>goignore</title><link>https://followtheproecess.github.io/projects/goignore/</link><pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate><guid>https://followtheproecess.github.io/projects/goignore/</guid><description>An extremely simple go CLI to hit the gitignore API with whatever you pass as command line arguments. The list of things you can pass here are documented on gitignore.io.
Source Code: https://github.com/FollowTheProcess/gotoil You&amp;rsquo;ll get back a .gitignore file saved to $CWD/.gitignore with the contents generated from the API.
Installation go get -u github.com/FollowTheProcess/goignore Usage Inside the folder you want the .gitignore to live in, run:
goignore macos vscode go This will get you a .</description></item><item><title>pytoil</title><link>https://followtheproecess.github.io/projects/pytoil/</link><pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate><guid>https://followtheproecess.github.io/projects/pytoil/</guid><description>pytoil is a small, helpful CLI to help developers manage their local and remote projects with ease!
Source Code: https://github.com/FollowTheProcess/pytoil
Documentation: https://FollowTheProcess.github.io/pytoil/
What is it? pytoil is a handy tool that helps you stay on top of all your projects, remote or local. It&amp;rsquo;s primarily aimed at python developers but you could easily use it to manage any project!
pytoil is:
Easy to use ✅ Easy to configure ✅ Safe (it won&amp;rsquo;t edit your repos at all) ✅ Useful!</description></item><item><title>Automate your Virtual Environments... and everything else.</title><link>https://followtheproecess.github.io/posts/auto_venv/</link><pubDate>Mon, 01 Mar 2021 17:27:07 +0000</pubDate><guid>https://followtheproecess.github.io/posts/auto_venv/</guid><description>We all know virtual environments are important! But they are a bit of a pain if you do them a lot&amp;hellip;
# Make it python -m venv .venv # Activate it source .venv/bin/activate # Install/upgrade seeds python -m pip install --upgrade pip setuptools wheel # Install what you actually wanted python -m pip install things i actually wanted python -m pip install this needs to be automated Automation I LOVE automating things and given that the commands we see above have to be typed every time you start a new project, this should scream automation to you!</description></item><item><title>pymechtest</title><link>https://followtheproecess.github.io/projects/pymechtest/</link><pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate><guid>https://followtheproecess.github.io/projects/pymechtest/</guid><description>pymechtest is a small, hopefully helpful python package to help engineers collate, process, analyse, and report on mechanical test data. I built pymechtest to help automate the things I did on a near-daily basis as a materials engineer. I hope it can prove some use to you too!
Source Code: https://github.com/FollowTheProcess/pymechtest
Documentation: https://FollowTheProcess.github.io/pymechtest/
Overview Have you ever had to process a bunch of csv output from a mechanical test machine, copying and pasting data into a hacky Excel template to calculate things like elastic modulus and yield strength?</description></item></channel></rss>