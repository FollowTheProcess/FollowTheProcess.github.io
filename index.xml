<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>@FollowTheProcess</title><link>https://followtheproecess.github.io/</link><description>Recent content on @FollowTheProcess</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 26 Oct 2021 22:05:11 +0100</lastBuildDate><atom:link href="https://followtheproecess.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Self Documenting Makefile</title><link>https://followtheproecess.github.io/posts/makefile/</link><pubDate>Tue, 26 Oct 2021 22:05:11 +0100</pubDate><guid>https://followtheproecess.github.io/posts/makefile/</guid><description>If you aren&amp;rsquo;t familiar with make, it&amp;rsquo;s a command runner and build system capable of quite complicated stuff. It&amp;rsquo;s syntax can get complicated for non-trivial workflows and it has lots of weird quirks (like .PHONY).
However, it&amp;rsquo;s ubiquitous on nearly all systems and pretty easy to get going with so it&amp;rsquo;s very widely used in all sorts of projects in just about every language.
In fact, a filename global search on GitHub yields an astonishing 112 million results!</description></item><item><title>Shut Down a Go HTTP Server Gracefully</title><link>https://followtheproecess.github.io/posts/graceful_shutdown/</link><pubDate>Mon, 25 Oct 2021 19:04:46 +0100</pubDate><guid>https://followtheproecess.github.io/posts/graceful_shutdown/</guid><description>When developing HTTP services in Go, you will start and stop your server hundreds of times, think of the whole go run main.go ctrl + c loop!
When you hit ctrl + c, (on UNIX systems) your program is passed the SIGINT Unix signal. The go runtime handles this and will stop your program relatively safely, but it&amp;rsquo;s not great practice!
What if you have database connection pools open or forgot to close a file etc.</description></item><item><title>Just > Make</title><link>https://followtheproecess.github.io/posts/just/</link><pubDate>Sun, 24 Oct 2021 10:22:23 +0100</pubDate><guid>https://followtheproecess.github.io/posts/just/</guid><description>Makefiles (GNU Make) are ubiquitous in software development and they are a fantastically useful tool! But for all but the simplest tasks, the syntax can get very unreadable and messy.
Some programs like complex C or C++ projects will use Makefiles as the full build system it was designed to be, however most people tend to use Makefiles as simple task runners.
Consider the following example for a simple Go project:</description></item><item><title>Using FieldsFunc in Go</title><link>https://followtheproecess.github.io/posts/fieldsfunc/</link><pubDate>Fri, 22 Oct 2021 20:34:50 +0100</pubDate><guid>https://followtheproecess.github.io/posts/fieldsfunc/</guid><description>I&amp;rsquo;ve been playing with Go a lot recently, and one thing it lends itself really well to is CLIs (Command Line Interfaces):
Runs very fast, feels snappy to use Standalone, statically linked binary - easy to distribute Easy cross-compilation for multiple platforms, OS&amp;rsquo;s and processor architectures Excellent libraries for creating CLIs e.g. cobra The excellent GitHub CLI is written in Go üëèüèª
So needless to say, I&amp;rsquo;ve been writing more than a few CLIs: gotoil, tag, goignore etc&amp;hellip;</description></item><item><title>goignore</title><link>https://followtheproecess.github.io/projects/goignore/</link><pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate><guid>https://followtheproecess.github.io/projects/goignore/</guid><description>An extremely simple go CLI to hit the gitignore API with whatever you pass as command line arguments. The list of things you can pass here are documented on gitignore.io.
Source Code: https://github.com/FollowTheProcess/goignore You&amp;rsquo;ll get back a .gitignore file saved to $CWD/.gitignore with the contents generated from the API.
Installation go install github.com/FollowTheProcess/goignore@latest Usage Inside the folder you want the .gitignore to live in, run:
goignore macos visualstudiocode go This will get you a .</description></item><item><title>pytoil</title><link>https://followtheproecess.github.io/projects/pytoil/</link><pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate><guid>https://followtheproecess.github.io/projects/pytoil/</guid><description>pytoil is a small, helpful CLI to help developers manage their local and remote projects with ease!
Source Code: https://github.com/FollowTheProcess/pytoil
Documentation: https://FollowTheProcess.github.io/pytoil/
What is it? pytoil is a handy tool that helps you stay on top of all your projects, remote or local. It&amp;rsquo;s primarily aimed at python developers but you could easily use it to manage any project!
pytoil is:
Easy to use ‚úÖ Easy to configure ‚úÖ Safe (it won&amp;rsquo;t edit your repos at all) ‚úÖ Useful!</description></item><item><title>Automate your Virtual Environments... and everything else.</title><link>https://followtheproecess.github.io/posts/auto_venv/</link><pubDate>Mon, 01 Mar 2021 17:27:07 +0000</pubDate><guid>https://followtheproecess.github.io/posts/auto_venv/</guid><description>We all know virtual environments are important! But they are a bit of a pain if you do them a lot&amp;hellip;
# Make it python -m venv .venv # Activate it source .venv/bin/activate # Install/upgrade seeds python -m pip install --upgrade pip setuptools wheel # Install what you actually wanted python -m pip install things i actually wanted python -m pip install this needs to be automated Automation I LOVE automating things and given that the commands we see above have to be typed every time you start a new project, this should scream automation to you!</description></item><item><title>Prevent Global Pip Installs</title><link>https://followtheproecess.github.io/posts/require_venv/</link><pubDate>Tue, 23 Feb 2021 14:21:11 +0000</pubDate><guid>https://followtheproecess.github.io/posts/require_venv/</guid><description>This is going to be a short one, about something I discovered in the pip documentation the other day and never knew about and I wish I did before I broke my python installation a dozen times when I was first starting out!
Problem We all know the dangers of breaking your system python installation with package conflicts.
Virtual environments are probably the most common way of avoiding nasty package conflicts.</description></item><item><title>Pyenv is Awesome!</title><link>https://followtheproecess.github.io/posts/pyenv/</link><pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate><guid>https://followtheproecess.github.io/posts/pyenv/</guid><description>I think everyone who has touched python at some point has seen this picture&amp;hellip;
It&amp;rsquo;s mainly poking fun at the kinds of ways you can get your installation all screwed up if you&amp;rsquo;re not careful but is often misinterpreted as throwing shade on how python works.
Brett Cannon&amp;rsquo;s Blog Post has an excellent deconstruction of what this xkcd means and how to avoid it.
There&amp;rsquo;s lots you can do to avoid this happening to you.</description></item><item><title>pymechtest</title><link>https://followtheproecess.github.io/projects/pymechtest/</link><pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate><guid>https://followtheproecess.github.io/projects/pymechtest/</guid><description>pymechtest is a small, hopefully helpful python package to help engineers collate, process, analyse, and report on mechanical test data. I built pymechtest to help automate the things I did on a near-daily basis as a materials engineer. I hope it can prove some use to you too!
Source Code: https://github.com/FollowTheProcess/pymechtest
Documentation: https://FollowTheProcess.github.io/pymechtest/
Overview Have you ever had to process a bunch of csv output from a mechanical test machine, copying and pasting data into a hacky Excel template to calculate things like elastic modulus and yield strength?</description></item><item><title>Buggy Accelerate Backend</title><link>https://followtheproecess.github.io/posts/buggy_accelerate/</link><pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate><guid>https://followtheproecess.github.io/posts/buggy_accelerate/</guid><description>If you work on macOS and use numpy, chances are at some point you may have had some very confusing error message appear about &amp;ldquo;buggy accelerate backend&amp;hellip; something something&amp;hellip; polyfit sanity check.&amp;rdquo;
If you&amp;rsquo;ve not had the joy of running into this particular error: https://github.com/numpy/numpy/issues/15947 I don&amp;rsquo;t envy you.
There&amp;rsquo;s quite a lot of information on the GitHub issue thread about it and on stack overflow etc and honestly you should look at that for a better explanation, those people know far more than me!</description></item><item><title>Fatigue Damage Prediction</title><link>https://followtheproecess.github.io/projects/fatigue/</link><pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate><guid>https://followtheproecess.github.io/projects/fatigue/</guid><description>Using machine learning to predict fatigue crack growth under complex thermomechanical loads. Achieved a damage severity predicive accuracy of ¬±0.25mm and a positional predictive accuracy of ¬±7.0mm.
Tom Fleet, Sep 2020
Background Repeated cyclic loading of a material will eventually lead to a phenomenon called &amp;ldquo;fatigue crack growth&amp;rdquo;. I&amp;rsquo;m not going to explain the details here but I&amp;rsquo;d point you to this for more info. Essentially, a crack will start to form and repeated cyclic loading will progressively grow this crack until it is large enough such that the remaining material can no longer handle the stress and the component will break.</description></item><item><title>Cookie Pypackage</title><link>https://followtheproecess.github.io/projects/cookie_pypackage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://followtheproecess.github.io/projects/cookie_pypackage/</guid><description>A modern python package template, inspired by the original but with some updates bringing it to the forefront of modern python!
Source Code: https://github.com/FollowTheProcess/cookie_pypackage Changes from the Original Changed from tox to nox for flexible python test automation Drop support for unittest in favour of pytest Change CI provider from Travis to GitHub actions Change docs from Sphinx to MkDocs Built in support for static type hinting with mypy Made compliant with PEP 517/518 Features GitHub Actions The project template comes with a ready to go GitHub Actions configuration file which automates all your code quality checks:</description></item><item><title>Gotoil</title><link>https://followtheproecess.github.io/projects/gotoil/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://followtheproecess.github.io/projects/gotoil/</guid><description>Handy CLI to automate the development workflow ü§ñ
Free software: Apache Software License 2.0 Project Description gotoil is a handly CLI tool that helps you stay on top of all your development projects, whether they&amp;rsquo;re on your local machine or on GitHub! It&amp;rsquo;s based on it&amp;rsquo;s sister project pytoil but (as you&amp;rsquo;ve probably guessed by the name) it&amp;rsquo;s written in Go, not python!
pytoil is aimed primarily at python developers, it has some python specific features such as automatically creating and managing virtual environments.</description></item><item><title>msg</title><link>https://followtheproecess.github.io/projects/msg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://followtheproecess.github.io/projects/msg/</guid><description>üöÄ A lightweight console printing toolkit for Go CLIs.
Source Code: https://github.com/FollowTheProcess/msg
Free software: MIT License
Project Description Who else is bored with boring grey text in CLIs? üôã‚Äç‚ôÄÔ∏è
We all have fancy terminals, utf-8 is everywhere, no one is still using the stock windows command prompt any more&amp;hellip; are they? ü§®
When writing pytoil I discovered ines/wasabi for this exact purpose and absolutely loved it immediately:</description></item><item><title>Tag</title><link>https://followtheproecess.github.io/projects/tag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://followtheproecess.github.io/projects/tag/</guid><description>Interact with semver git tags with ease! üè∑
Free software: Apache Software License 2.0 Project Description Releasing new versions of software can be hard! Most projects have CI/CD pipelines set up to help with this and these pipelines are typically triggered on push of a new semver tag e.g. v1.2.4.
I made tag because I can never remember the commands to correctly issue and push a tag:
&amp;ldquo;Was it git tag v1.</description></item></channel></rss>