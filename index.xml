<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>@FollowTheProcess</title><link>https://followtheprocess.github.io/</link><description>Recent content on @FollowTheProcess</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 27 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://followtheprocess.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>What exactly is 'Modern Python'?</title><link>https://followtheprocess.github.io/posts/modern_python/</link><pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate><guid>https://followtheprocess.github.io/posts/modern_python/</guid><description>&lt;p>Python is going through a huge modernisation kick in recent years with things like &lt;a href="https://www.python.org/dev/peps/pep-0484/">PEP 484 Type Hints&lt;/a>, &lt;a href="https://github.com/markshannon/faster-cpython/blob/master/plan.md">performance improvements&lt;/a> coming in 3.11 and now being able to run on &lt;a href="https://twitter.com/ethanhs/status/1464308141105967104">web assembly&lt;/a>, moving away from the hangover of python 2 and fully embracing the new style of &amp;ldquo;modern&amp;rdquo; python 3.&lt;/p>
&lt;p>The python sphere is full of posts, packages and repos claiming to use or take advantage of &amp;ldquo;modern python&amp;rdquo;&lt;/p>
&lt;p>So you may be asking&amp;hellip; what exactly do people mean when they say &amp;ldquo;modern python&amp;rdquo;? What follows is a list of what I consider to the most essential components of &amp;ldquo;modern python&amp;rdquo; and by the end hopefully you&amp;rsquo;ll want to make sure you&amp;rsquo;re doing &amp;ldquo;modern python&amp;rdquo; too!&lt;/p></description></item><item><title>Self Documenting Makefile</title><link>https://followtheprocess.github.io/posts/makefile/</link><pubDate>Tue, 26 Oct 2021 22:05:11 +0100</pubDate><guid>https://followtheprocess.github.io/posts/makefile/</guid><description>&lt;p>If you aren&amp;rsquo;t familiar with &lt;a href="https://www.gnu.org/software/make/">make&lt;/a>, it&amp;rsquo;s a command runner and build system capable of quite complicated stuff. It&amp;rsquo;s syntax can get complicated for non-trivial workflows and it has lots of weird quirks (like &lt;code>.PHONY&lt;/code>).&lt;/p>
&lt;p>However, it&amp;rsquo;s ubiquitous on nearly all systems and pretty easy to get going with so it&amp;rsquo;s very widely used in all sorts of projects in just about every language.&lt;/p>
&lt;p>In fact, a filename global search on GitHub yields an astonishing 112 million results!&lt;/p></description></item><item><title>Shut Down a Go HTTP Server Gracefully</title><link>https://followtheprocess.github.io/posts/graceful_shutdown/</link><pubDate>Mon, 25 Oct 2021 19:04:46 +0100</pubDate><guid>https://followtheprocess.github.io/posts/graceful_shutdown/</guid><description>&lt;p>When developing HTTP services in Go, you will start and stop your server hundreds of times, think of the whole &lt;code>go run main.go&lt;/code> &lt;code>ctrl + c&lt;/code> loop!&lt;/p>
&lt;p>When you hit &lt;code>ctrl + c&lt;/code>, (on UNIX systems) your program is passed the &lt;code>SIGINT&lt;/code> Unix signal. The go runtime handles this and will stop your program relatively safely, but it&amp;rsquo;s not &lt;strong>great&lt;/strong> practice!&lt;/p>
&lt;p>What if you have database connection pools open or forgot to close a file etc.?&lt;/p></description></item><item><title>Just > Make</title><link>https://followtheprocess.github.io/posts/just/</link><pubDate>Sun, 24 Oct 2021 10:22:23 +0100</pubDate><guid>https://followtheprocess.github.io/posts/just/</guid><description>&lt;p>Makefiles (&lt;a href="https://www.gnu.org/software/make/">GNU Make&lt;/a>) are ubiquitous in software development and they are a fantastically useful tool! But for all but the simplest tasks, the syntax can get very unreadable and messy.&lt;/p>
&lt;p>Some programs like complex C or C++ projects will use Makefiles as the full build system it was designed to be, however most people tend to use Makefiles as simple task runners.&lt;/p>
&lt;p>Consider the following example for a simple Go project:&lt;/p></description></item><item><title>Using FieldsFunc in Go</title><link>https://followtheprocess.github.io/posts/fieldsfunc/</link><pubDate>Fri, 22 Oct 2021 20:34:50 +0100</pubDate><guid>https://followtheprocess.github.io/posts/fieldsfunc/</guid><description>&lt;p>I&amp;rsquo;ve been playing with Go a lot recently, and one thing it lends itself &lt;strong>really&lt;/strong> well to is CLIs (Command Line Interfaces):&lt;/p>
&lt;ul>
&lt;li>Runs very fast, feels snappy to use&lt;/li>
&lt;li>Standalone, statically linked binary - easy to distribute&lt;/li>
&lt;li>Easy cross-compilation for multiple platforms, OS&amp;rsquo;s and processor architectures&lt;/li>
&lt;li>Excellent libraries for creating CLIs e.g. &lt;a href="https://github.com/spf13/cobra">cobra&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The excellent &lt;a href="https://github.com/cli/cli">GitHub CLI&lt;/a> is written in Go 👏🏻&lt;/p>
&lt;p>So needless to say, I&amp;rsquo;ve been writing more than a few CLIs: &lt;a href="https://github.com/FollowTheProcess/gotoil">gotoil&lt;/a>, &lt;a href="https://github.com/FollowTheProcess/tag">tag&lt;/a>, &lt;a href="https://github.com/FollowTheProcess/goignore">goignore&lt;/a> etc&amp;hellip;&lt;/p></description></item><item><title>goignore</title><link>https://followtheprocess.github.io/projects/goignore/</link><pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate><guid>https://followtheprocess.github.io/projects/goignore/</guid><description>&lt;p>&lt;em>An extremely simple go CLI to hit the &lt;a href="https://www.toptal.com/developers/gitignore">gitignore API&lt;/a> with whatever you pass as command line arguments. The list of things you can pass here are documented on &lt;a href="https://www.toptal.com/developers/gitignore">gitignore.io&lt;/a>.&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Source Code&lt;/strong>: &lt;a href="https://github.com/FollowTheProcess/goignore/">https://github.com/FollowTheProcess/goignore&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>You&amp;rsquo;ll get back a .gitignore file saved to &lt;code>$CWD/.gitignore&lt;/code> with the contents generated from the API.&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>go install github.com/FollowTheProcess/goignore@latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="usage">Usage&lt;/h2>
&lt;p>Inside the folder you want the &lt;code>.gitignore&lt;/code> to live in, run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>goignore macos visualstudiocode go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will get you a &lt;code>.gitignore&lt;/code> file that looks like&amp;hellip;&lt;/p></description></item><item><title>pytoil</title><link>https://followtheprocess.github.io/projects/pytoil/</link><pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate><guid>https://followtheprocess.github.io/projects/pytoil/</guid><description>&lt;p>&lt;img src="https://followtheprocess.github.io/images/projects/pytoil/logo.png" alt="logo">&lt;/p>
&lt;p>&lt;em>pytoil is a small, helpful CLI to help developers manage their local and remote projects with ease!&lt;/em>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Source Code&lt;/strong>: &lt;a href="https://github.com/FollowTheProcess/pytoil">https://github.com/FollowTheProcess/pytoil&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Documentation&lt;/strong>: &lt;a href="https://FollowTheProcess.github.io/pytoil/">https://FollowTheProcess.github.io/pytoil/&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-it">What is it?&lt;/h2>
&lt;p>&lt;code>pytoil&lt;/code> is a handy tool that helps you stay on top of all your projects, remote or local. It&amp;rsquo;s primarily aimed at python developers but you could easily use it to manage any project!&lt;/p>
&lt;p>pytoil is:&lt;/p>
&lt;ul>
&lt;li>Easy to use &amp;#x2705;&lt;/li>
&lt;li>Easy to configure &amp;#x2705;&lt;/li>
&lt;li>Safe (it won&amp;rsquo;t edit your repos at all) &amp;#x2705;&lt;/li>
&lt;li>Useful! (I hope &amp;#x1f603;)&lt;/li>
&lt;/ul>
&lt;p>Say goodbye to janky bash scripts &amp;#x1f44b;&lt;/p></description></item><item><title>Automate your Virtual Environments... and everything else.</title><link>https://followtheprocess.github.io/posts/auto_venv/</link><pubDate>Mon, 01 Mar 2021 17:27:07 +0000</pubDate><guid>https://followtheprocess.github.io/posts/auto_venv/</guid><description>&lt;p>We all know virtual environments are important! But they are a bit of a pain if you do them a lot&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b949e;font-style:italic"># Make it&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python -m venv .venv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b949e;font-style:italic"># Activate it&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>source .venv/bin/activate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b949e;font-style:italic"># Install/upgrade seeds&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python -m pip install --upgrade pip setuptools wheel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b949e;font-style:italic"># Install what you actually wanted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python -m pip install things i actually wanted
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python -m pip install this needs to be automated
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="automation">Automation&lt;/h2>
&lt;p>I &lt;strong>LOVE&lt;/strong> automating things and given that the commands we see above have to be typed &lt;em>every time&lt;/em> you start a new project, this should scream automation to you!&lt;/p></description></item><item><title>Prevent Global Pip Installs</title><link>https://followtheprocess.github.io/posts/require_venv/</link><pubDate>Tue, 23 Feb 2021 14:21:11 +0000</pubDate><guid>https://followtheprocess.github.io/posts/require_venv/</guid><description>&lt;p>This is going to be a short one, about something I discovered in the &lt;a href="https://pip.pypa.io/en/stable/">pip&lt;/a> documentation the other day and never knew about and I wish I did before I broke my python installation a dozen times when I was first starting out!&lt;/p>
&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>We all know the dangers of breaking your system python installation with package conflicts.&lt;/p>
&lt;p>Virtual environments are probably the most common way of avoiding nasty package conflicts. A virtual environment is effectively (but not exactly) a self contained version of python you can install packages into without touching your system python.&lt;/p></description></item><item><title>Pyenv is Awesome!</title><link>https://followtheprocess.github.io/posts/pyenv/</link><pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate><guid>https://followtheprocess.github.io/posts/pyenv/</guid><description>&lt;p>I think everyone who has touched python at some point has seen this picture&amp;hellip;&lt;/p>
&lt;p>&lt;img src="https://followtheprocess.github.io/images/posts/python_environment.png" alt="environment hell">&lt;/p>
&lt;p>It&amp;rsquo;s mainly poking fun at the kinds of ways you can get your installation all screwed up if you&amp;rsquo;re not careful but is often misinterpreted as throwing shade on how python works.&lt;/p>
&lt;p>&lt;a href="https://snarky.ca/deconstructing-xkcd-com-1987/">Brett Cannon&amp;rsquo;s Blog Post&lt;/a> has an excellent deconstruction of what this xkcd means and how to avoid it.&lt;/p>
&lt;p>There&amp;rsquo;s lots you can do to avoid this happening to you. My favourite method is &lt;a href="https://github.com/pyenv/pyenv">pyenv&lt;/a>.&lt;/p></description></item><item><title>pymechtest</title><link>https://followtheprocess.github.io/projects/pymechtest/</link><pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate><guid>https://followtheprocess.github.io/projects/pymechtest/</guid><description>&lt;p>&lt;img src="https://followtheprocess.github.io/images/projects/pymechtest/logo.png" alt="logo">&lt;/p>
&lt;p>&lt;em>pymechtest is a small, hopefully helpful python package to help engineers collate, process, analyse, and report on mechanical test data. I built pymechtest to help automate the things I did on a near-daily basis as a materials engineer. I hope it can prove some use to you too!&lt;/em>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Source Code&lt;/strong>: &lt;a href="https://github.com/FollowTheProcess/pymechtest">https://github.com/FollowTheProcess/pymechtest&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Documentation&lt;/strong>: &lt;a href="https://FollowTheProcess.github.io/pymechtest/">https://FollowTheProcess.github.io/pymechtest/&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>Have you ever had to process a bunch of csv output from a mechanical test machine, copying and pasting data into a hacky Excel template to calculate things like elastic modulus and yield strength?&lt;/p></description></item><item><title>Buggy Accelerate Backend</title><link>https://followtheprocess.github.io/posts/buggy_accelerate/</link><pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate><guid>https://followtheprocess.github.io/posts/buggy_accelerate/</guid><description>&lt;p>If you work on macOS and use &lt;a href="https://numpy.org">numpy&lt;/a>, chances are at some point you may have had some very confusing error message appear about &amp;ldquo;buggy accelerate backend&amp;hellip; something something&amp;hellip; polyfit sanity check.&amp;rdquo;&lt;/p>
&lt;p>If you&amp;rsquo;ve not had the joy of running into this particular error: &lt;a href="https://github.com/numpy/numpy/issues/15947">https://github.com/numpy/numpy/issues/15947&lt;/a> I don&amp;rsquo;t envy you.&lt;/p>
&lt;p>There&amp;rsquo;s quite a lot of information on the GitHub issue thread about it and on stack overflow etc and honestly you should look at that for a better explanation, those people know far more than me! There&amp;rsquo;s lots of informed discussion on exactly &lt;em>why&lt;/em> this error is raised which I&amp;rsquo;m not going to go into here.&lt;/p></description></item><item><title>Fatigue Damage Prediction</title><link>https://followtheprocess.github.io/projects/fatigue/</link><pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate><guid>https://followtheprocess.github.io/projects/fatigue/</guid><description>&lt;p>&lt;em>Using machine learning to predict fatigue crack growth under complex thermomechanical loads. Achieved a damage severity predicive accuracy of ±0.25mm and a positional predictive accuracy of ±7.0mm.&lt;/em>&lt;/p>
&lt;p>Tom Fleet, Sep 2020&lt;/p>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>Repeated cyclic loading of a material will eventually lead to a phenomenon called &amp;ldquo;fatigue crack growth&amp;rdquo;. I&amp;rsquo;m not going to explain the details here but I&amp;rsquo;d point you to &lt;a href="https://en.wikipedia.org/wiki/Fatigue_(material)">this&lt;/a> for more info. Essentially, a crack will start to form and repeated cyclic loading will progressively grow this crack until it is large enough such that the remaining material can no longer handle the stress and the component will break.&lt;/p></description></item><item><title>Cookie Pypackage</title><link>https://followtheprocess.github.io/projects/cookie_pypackage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://followtheprocess.github.io/projects/cookie_pypackage/</guid><description>&lt;p>&lt;em>A modern python package template, inspired by the &lt;a href="https://github.com/audreyfeldroy/cookiecutter-pypackage">original&lt;/a> but with some updates bringing it to the forefront of modern python!&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Source Code&lt;/strong>: &lt;a href="https://github.com/FollowTheProcess/cookie_pypackage/">https://github.com/FollowTheProcess/cookie_pypackage&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="changes-from-the-original">Changes from the Original&lt;/h2>
&lt;ul>
&lt;li>Changed from &lt;a href="https://tox.readthedocs.io/en/latest/">tox&lt;/a> to &lt;a href="https://nox.thea.codes/en/stable/">nox&lt;/a> for flexible python test automation&lt;/li>
&lt;li>Drop support for unittest in favour of &lt;a href="https://docs.pytest.org/en/stable/">pytest&lt;/a>&lt;/li>
&lt;li>Change CI provider from Travis to &lt;a href="https://docs.github.com/en/free-pro-team@latest/actions">GitHub actions&lt;/a>&lt;/li>
&lt;li>Change docs from &lt;a href="https://www.sphinx-doc.org/en/master/">Sphinx&lt;/a> to &lt;a href="https://www.mkdocs.org">MkDocs&lt;/a>&lt;/li>
&lt;li>Built in support for static type hinting with &lt;a href="https://mypy.readthedocs.io/en/stable/">mypy&lt;/a>&lt;/li>
&lt;li>Made compliant with PEP 517/518&lt;/li>
&lt;/ul>
&lt;h2 id="features">Features&lt;/h2>
&lt;h3 id="github-actions">&lt;a href="https://docs.github.com/en/free-pro-team@latest/actions">GitHub Actions&lt;/a>&lt;/h3>
&lt;p>The project template comes with a ready to go GitHub Actions configuration file which automates all your code quality checks:&lt;/p></description></item><item><title>Gotoil</title><link>https://followtheprocess.github.io/projects/gotoil/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://followtheprocess.github.io/projects/gotoil/</guid><description>&lt;p>&lt;img src="https://followtheprocess.github.io/images/projects/gotoil/logo.png" alt="logo">&lt;/p>
&lt;p>Handy CLI to automate the development workflow &amp;#x1f916;&lt;/p>
&lt;ul>
&lt;li>Free software: Apache Software License 2.0&lt;/li>
&lt;/ul>
&lt;h2 id="project-description">Project Description&lt;/h2>
&lt;p>&lt;code>gotoil&lt;/code> is a handly CLI tool that helps you stay on top of all your development projects, whether they&amp;rsquo;re on your local machine or on GitHub! It&amp;rsquo;s based on it&amp;rsquo;s sister project &lt;a href="https://github.com/FollowTheProcess/pytoil">pytoil&lt;/a> but (as you&amp;rsquo;ve probably guessed by the name) it&amp;rsquo;s written in Go, not python!&lt;/p>
&lt;p>&lt;a href="https://github.com/FollowTheProcess/pytoil">pytoil&lt;/a> is aimed primarily at python developers, it has some python specific features such as automatically creating and managing virtual environments. Gotoil was written as a much more general tool and just implements the core features everyone is likely to use regardless of tech stack!&lt;/p></description></item><item><title>msg</title><link>https://followtheprocess.github.io/projects/msg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://followtheprocess.github.io/projects/msg/</guid><description>&lt;img src="https://followtheprocess.github.io/images/projects/msg/logo.png" alt="logo" class="img-responsive" width=50% height=50%>
&lt;p>&lt;em>&amp;#x1f680; A lightweight console printing toolkit for Go CLIs.&lt;/em>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Source Code&lt;/strong>: &lt;a href="https://github.com/FollowTheProcess/msg/">https://github.com/FollowTheProcess/msg&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Free software: MIT License&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="project-description">Project Description&lt;/h2>
&lt;p>Who else is bored with boring grey text in CLIs? &amp;#x1f64b;&lt;/p>
&lt;p>We all have fancy terminals, utf-8 is everywhere, no one is still using the stock windows command prompt any more&amp;hellip; are they? &amp;#x1f928;&lt;/p>
&lt;p>When writing &lt;a href="https://github.com/FollowTheProcess/pytoil">pytoil&lt;/a> I discovered &lt;a href="https://github.com/ines/wasabi">ines/wasabi&lt;/a> for this exact purpose and absolutely loved it immediately:&lt;/p>
&lt;ul>
&lt;li>No dependencies outside the python stdlib&lt;/li>
&lt;li>Configurable if you want but the defaults look great&lt;/li>
&lt;li>Super easy to use and doesn&amp;rsquo;t get in the way of what your CLI is trying to do&lt;/li>
&lt;/ul>
&lt;p>Then I started learning go and writing some CLIs I kept wishing I had it there too.&lt;/p></description></item><item><title>Py</title><link>https://followtheprocess.github.io/projects/py/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://followtheprocess.github.io/projects/py/</guid><description>&lt;p>&lt;em>(Experimental) port of Brett Cannon&amp;rsquo;s &lt;a href="https://github.com/brettcannon/python-launcher">python-launcher&lt;/a> to Go, with a few tweaks 😉&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Free software: MIT License&lt;/li>
&lt;/ul>
&lt;h2 id="project-description">Project Description&lt;/h2>
&lt;p>&lt;strong>Description of the original &lt;a href="https://github.com/brettcannon/python-launcher">python-launcher&lt;/a>:&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>Taken directly from the official &lt;a href="https://github.com/brettcannon/python-launcher/blob/main/README.md">README&lt;/a>&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>Launch your Python interpreter the lazy/smart way!&lt;/p>
&lt;p>This project is an implementation of the &lt;code>py&lt;/code> command for Unix-based platforms
(with some potential experimentation for good measure 😉).&lt;/p>
&lt;p>The goal is to have &lt;code>py&lt;/code> become the cross-platform command that Python users
typically use to launch an interpreter while doing development. By having a
command that is version-agnostic when it comes to Python, it side-steps
the &amp;ldquo;what should the &lt;code>python&lt;/code> command point to?&amp;rdquo; debate by clearly specifying
that upfront (i.e. the newest version of Python that can be found). This also
unifies the suggested command to document for launching Python on both Windows
as Unix as &lt;code>py&lt;/code> has existed as the preferred
&lt;a href="https://docs.python.org/3/using/windows.html#launcher">command on Windows&lt;/a>
since 2012 with the release of Python 3.3.&lt;/p></description></item><item><title>Tag</title><link>https://followtheprocess.github.io/projects/tag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://followtheprocess.github.io/projects/tag/</guid><description>&lt;img src="https://followtheprocess.github.io/images/projects/tag/logo.png" alt="logo" class="img-responsive" width=50% height=50%>
&lt;p>Interact with semver git tags with ease! 🏷&lt;/p>
&lt;ul>
&lt;li>Free software: Apache Software License 2.0&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://github.com/FollowTheProcess/tag/raw/main/img/demo.gif" alt="demo">&lt;/p>
&lt;h2 id="project-description">Project Description&lt;/h2>
&lt;p>Releasing new versions of software can be hard! Most projects have CI/CD pipelines set up to help with this and these pipelines are typically triggered on push of a new &lt;a href="https://semver.org">semver&lt;/a> tag e.g. &lt;code>v1.2.4&lt;/code>.&lt;/p>
&lt;p>I made tag because I can never remember the commands to correctly issue and push a tag:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;Was it &lt;code>git tag v1.2.4&lt;/code>?&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;Do I need to annotate it: &lt;code>git tag -a v1.2.4&lt;/code>?&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;Do I need to add a message: &lt;code>git tag -a v1.2.4 -m &amp;quot;Some message&amp;quot;&lt;/code>?&lt;/li>
&lt;li>&amp;ldquo;Wait how do I push it again: &lt;code>git push --tags&lt;/code> or &lt;code>git push origin v1.2.4&lt;/code>?&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>This invariably ends up with me doing it differently across every project, spending (even more) time on stackoverflow googling random git commands.&lt;/p></description></item></channel></rss>